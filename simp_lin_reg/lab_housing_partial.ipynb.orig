{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lab:  Simple linear regression\n",
    "\n",
    "In this lab, you will load data, plot data, perform simple mathematical manipulations, and fit a simple linear regression model.  Before doing this lab, you can go through the [demo](./auto_mpg.ipynb) to see an example of these operations on an automobile dataset.  The lab use the Boston housing data set, a widely-used machine learning data set for illustrating basic concepts.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Loading the data\n",
    "\n",
    "The Boston housing data set was collected in the 1970s to study the relationship between house price and various factors such as the house size, crime rate, socio-economic status, etc.  Since the variables are easy to understand, the data set is ideal for learning basic concepts in machine learning.  The raw data and a complete description of the dataset can be found on the UCI website:\n",
    "\n",
    "https://archive.ics.uci.edu/ml/datasets/Housing\n",
    "\n",
    "In the lab, you will complete all the code marked `TODO`. \n",
    "\n",
    "First, complete the following code that uses the `pd.read_csv` command to read the data from the file located at\n",
    "\n",
    "https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data\n",
    "\n",
    "I have supplied a list `names` of the column headers.  You will have to set the options in the `read_csv` command to correctly delimit the data in the file and name the columns correctly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
<<<<<<< HEAD
    "collapsed": false
=======
    "collapsed": true,
    "deletable": true,
    "editable": true
>>>>>>> master
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "names =[\n",
    "    'CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', \n",
    "    'AGE',  'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'PRICE'\n",
    "]\n",
    "\n",
    "# TODO:  Complete the code\n",
    "# df = pd.read_csv(...)\n",
<<<<<<< HEAD
    "df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data')"
=======
    "df = pd.read_csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases\"+\n",
    "                 \"/housing/housing.data\",\n",
    "                header=None, delim_whitespace=True, names=names, na_values='?')"
>>>>>>> master
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Display the first six rows of the data frame"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 3,
=======
   "execution_count": 2,
>>>>>>> master
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
<<<<<<< HEAD
       "      <th>0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00</th>\n",
=======
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>PRICE</th>\n",
>>>>>>> master
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
<<<<<<< HEAD
       "      <td>0.02731   0.00   7.070  0  0.4690  6.4210  78...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02729   0.00   7.070  0  0.4690  7.1850  61...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.03237   0.00   2.180  0  0.4580  6.9980  45...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.06905   0.00   2.180  0  0.4580  7.1470  54...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.02985   0.00   2.180  0  0.4580  6.4300  58...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.08829  12.50   7.870  0  0.5240  6.0120  66...</td>\n",
=======
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1</td>\n",
       "      <td>296.0</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.02985</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.430</td>\n",
       "      <td>58.7</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.12</td>\n",
       "      <td>5.21</td>\n",
       "      <td>28.7</td>\n",
>>>>>>> master
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
<<<<<<< HEAD
       "   0.00632  18.00   2.310  0  0.5380  6.5750  65.20  4.0900   1  296.0  15.30 396.90   4.98  24.00\n",
       "0   0.02731   0.00   7.070  0  0.4690  6.4210  78...                                              \n",
       "1   0.02729   0.00   7.070  0  0.4690  7.1850  61...                                              \n",
       "2   0.03237   0.00   2.180  0  0.4580  6.9980  45...                                              \n",
       "3   0.06905   0.00   2.180  0  0.4580  7.1470  54...                                              \n",
       "4   0.02985   0.00   2.180  0  0.4580  6.4300  58...                                              \n",
       "5   0.08829  12.50   7.870  0  0.5240  6.0120  66...                                              "
      ]
     },
     "execution_count": 3,
=======
       "      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n",
       "0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296.0   \n",
       "1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242.0   \n",
       "2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242.0   \n",
       "3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222.0   \n",
       "4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222.0   \n",
       "5  0.02985   0.0   2.18     0  0.458  6.430  58.7  6.0622    3  222.0   \n",
       "\n",
       "   PTRATIO       B  LSTAT  PRICE  \n",
       "0     15.3  396.90   4.98   24.0  \n",
       "1     17.8  396.90   9.14   21.6  \n",
       "2     17.8  392.83   4.03   34.7  \n",
       "3     18.7  394.63   2.94   33.4  \n",
       "4     18.7  396.90   5.33   36.2  \n",
       "5     18.7  394.12   5.21   28.7  "
      ]
     },
     "execution_count": 2,
>>>>>>> master
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TODO\n",
    "# TODO\n",
    "df.head(6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Basic Manipulations on the Data\n",
    "\n",
    "What is the shape of the data?  How many attributes are there?  How many samples?\n",
    "Print a statement of the form:\n",
    "\n",
    "    num samples=xxx, num attributes=yy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num samples=506, num attributes 14\n"
     ]
    }
   ],
   "source": [
    "# TODO\n",
    "print('num samples={shape[0]}, num attributes {shape[1]}'.format(shape=df.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Create a response vector `y` with the values in the column `PRICE`.  The vector `y` should be a 1D `numpy.array` structure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "506"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TODO\n",
    "# y = ...\n",
    "y = np.array(df[\"PRICE\"])\n",
    "y.size\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Use the response vector `y` to find the mean house price in thousands and the fraction of homes that are above $40k. (You may realize this is very cheap.  Prices have gone up a lot since the 1970s!).   Create print statements of the form:\n",
    "\n",
    "    The mean house price is xx.yy thousands of dollars.\n",
    "    Only x.y percent are above $40k."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean house price is 22.53 thousands of dollars.\n",
      "Only 6.1 percent are above $40k.\n"
     ]
    }
   ],
   "source": [
    "# TODO\n",
    "ymean = np.mean(y) # mean home price\n",
    "p_over40 = np.mean(y>40)\n",
    "\n",
    "print((\"The mean house price is {0:.2f} thousands of dollars.\\n\"+\n",
    "        \"Only {1:.1f} percent are above $40k.\").format(ymean, 100*p_over40))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Visualizing the Data\n",
    "\n",
    "Python's `matplotlib` has very good routines for plotting and visualizing data that closely follows the format of MATLAB programs.  You can load the `matplotlib` package with the following commands."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Similar to the `y` vector, create a predictor vector `x` containing the values in the `RM` column, which represents the average number of rooms in each region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "# TODO\n",
    "# x = ...\n",
    "x = np.array(df[\"RM\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Create a scatter plot of the price vs. the `RM` attribute.  Make sure your plot has grid lines and label the axes with reasonable labels so that someone else can understand the plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x113475b70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO\n",
    "plt.plot(x,y,'o')\n",
    "plt.xlabel('Average number of rooms in each region')\n",
    "plt.ylabel('PRICE')\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Fitting a Simple Linear Model\n",
    "\n",
    "We will write a simple function to perform a linear fit. Use the formulae given in the class, to compute the parameters $\\beta_0,\\beta_1$ in the linear model $$y =\\beta_0 + \\beta_1 x + \\epsilon$$ as well as the coefficient of determination $R^2$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def fit_linear(x,y):\n",
    "    \"\"\"\n",
    "    Given vectors of data points (x,y), performs a fit for the linear model:\n",
    "       yhat = beta0 + beta1*x, \n",
    "    The function returns beta0, beta1 and rsq, where rsq is the coefficient of determination.\n",
    "    \"\"\"\n",
    "    # TODO complete the following code\n",
    "    # beta0 = ...\n",
    "    # beta1 = ...\n",
    "    # rsq = ...\n",
    "    xmean = np.mean(x)\n",
    "    ymean = np.mean(y)\n",
    "    Sxx = np.sum((x-xmean) ** 2)\n",
    "    Sxy = np.sum((x-xmean) * (y-ymean))\n",
    "    Syy = np.sum((y-ymean) ** 2)\n",
    "    \n",
    "    beta1 = Sxy / Sxx\n",
    "    beta0 = ymean - beta1*xmean\n",
    "    \n",
    "    SStot = Syy\n",
    "    \n",
    "    def predict(x):\n",
    "        return beta0 + beta1*x\n",
    "\n",
    "    SSres = np.sum((y - predict(x)) ** 2)\n",
    "    rsq = 1 - SSres/SStot\n",
    "    \n",
    "    return beta0, beta1, rsq"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Using the function `fit_linear` above, print the values `beta0`, `beta1` and `rsq` for the linear model of price vs. number of rooms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "beta0 = -34.67, beta1 = 9.10, R^2 = 0.48\n"
     ]
    }
   ],
   "source": [
    "# TODO\n",
    "beta0, beta1, rSquared = fit_linear(x, y)\n",
    "print(\"beta0 = {0:.2f}, beta1 = {1:.2f}, R^2 = {2:.2f}\".format(beta0, beta1, rSquared))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Replot the scatter plot above, but now with the regression line.  You can create the regression line by creating points `xp` from say 4 to 9, computing the linear predicted values `yp` on those points and plotting `yp` vs. `xp` on top of the above plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1135a9048>]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1135a9ac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO\n",
    "plt.plot(x,y,'o')\n",
    "plt.xlabel('Average number of rooms in each region')\n",
    "plt.ylabel('PRICE')\n",
    "plt.grid(True)\n",
    "\n",
    "# generate data for regression line\n",
    "xplt = np.array([4,9])          \n",
    "yplt = beta1*xplt + beta0\n",
    "\n",
    "plt.plot(xplt,yplt,'-',linewidth=3)  # Plot the regression line"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Compute coefficients of determination\n",
    "\n",
    "We next compute the $R^2$ values for all the predictors and output the values in a table. Your table should look like the following, where each the first column is the attribute name and the second column is the $R^2$ value.\n",
    "\n",
    "    CRIM        0.151\n",
    "    ZN          0.130\n",
    "    INDUS       0.234\n",
    "    ...         ...\n",
    "\n",
    "To index over the set of colunms in the dataframe `df`, you can either loop over the items in the `names` lists (skipping over the final name `PRICE`) or loop over integer indices and use the method, `df.iloc`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def fit_linear(X,y):\n",
    "    \"\"\"\n",
    "    Given vectors of data points (x,y), performs a fit for the linear model:\n",
    "       yhat = beta0 + beta1*x, \n",
    "    The function returns beta0, beta1 and rsq, where rsq is the coefficient of determination.\n",
    "    \"\"\"\n",
    "    # TODO complete the following code\n",
    "    # beta0 = ...\n",
    "    # beta1 = ...\n",
    "    # rsq = ...\n",
    "    xmean = np.mean(X, axis=0)\n",
    "    ymean = np.mean(y)\n",
    "    Sxx = np.sum((X-xmean) ** 2       , axis=0)\n",
    "    Sxy = np.sum( ( (X-xmean).transpose() * (y-ymean) ).transpose(), axis=0)\n",
    "    Syy = np.sum((y-ymean) ** 2       , axis=0)\n",
    "    \n",
    "    beta1 = Sxy / Sxx\n",
    "    beta0 = ymean - beta1*xmean\n",
    "    \n",
    "    SStot = Syy\n",
    "    \n",
    "    def predict(X):\n",
    "        return beta0 + beta1*X\n",
    "\n",
    "    Y = y if len(X.shape) < 2 else np.tile(y, (X.shape[-1], 1)).transpose() # a bit of a kludge\n",
    "  \n",
    "    SSres = np.sum((Y - predict(X)) ** 2, axis=0)\n",
    "\n",
    "    rsq = 1 - SSres/SStot\n",
    "    \n",
    "    return beta0, beta1, rsq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tCRIM\t\t0.151\n",
      "\tZN\t\t0.130\n",
      "\tINDUS\t\t0.234\n",
      "\tCHAS\t\t0.031\n",
      "\tNOX\t\t0.183\n",
      "\tRM\t\t0.484\n",
      "\tAGE\t\t0.142\n",
      "\tDIS\t\t0.062\n",
      "\tRAD\t\t0.146\n",
      "\tTAX\t\t0.220\n",
      "\tPTRATIO\t\t0.258\n",
      "\tB\t\t0.111\n",
      "\tLSTAT\t\t0.544\n"
     ]
    }
   ],
   "source": [
    "# TODO\n",
    "cols = df.columns[df.columns != \"PRICE\"]\n",
    "X = np.array(df.ix[:, cols])\n",
    "\n",
    "rsq = fit_linear(X, y)[2]\n",
    "\n",
    "cols_rsq = np.column_stack((cols, rsq))\n",
    "\n",
    "print(\"\\n\".join( [\"\\t{}\\t\\t{:.3f}\".format(*row) for row in cols_rsq] ) )\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
